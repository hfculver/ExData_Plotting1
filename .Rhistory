}
get <- function() xm
setinv <- function(inv) si <<- inv
getinv <- function() si
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
si <- x$getinv()
if(!is.null(si)) {
message("getting cached data")
return(si)
}
data <- x$get()
si <- solve(data)
x$setinv(si)
si
}
zm<-makeCacheMatrix(xm1)
zm$get()
cacheSolve(zm)
cacheSolve(zm)
class(zm)
str(zm)
?rnorm
?qpois
library(xml)
install.packages(xml)
install.packages("XML")
library(xml)
install.packages("XML")
install.packages("XML",repos="http://www.omegahat.org/R",type="source")
library(xml)
remove.packages("XML")
list.packages9
list.packages()
installed.packages()
?install.packages
install.packages("/Downloads/R/XML_3.98-1.1.tar", repos = NULL, type="source")
library(xml)
library(XML)
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileURL,useInternal=TRUE)
remove(fileURL)
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileURL,useInternal=TRUE)
fileURL<-"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileURL,useInternal=TRUE)
rootNode<-xmlRoot(doc)
xmlName(rootNode)
rootNode[[1]]
xpathSApply(rootNode,"//zipcode",xmlValue)
zipCodes<-xpathSApply(rootNode,"//zipcode",xmlValue)
class(zipCodes)
table(zipCodes)
table(zipCodes)=="21231"
t1<-table(zipCodes)
t1[names(t1)=="21231"]
library(data.table)
nchar("<meta name="Distribution" content="Global" />")
nchar("<meta name="Distribution" content="Global" \/>")
?nchar
x<-"<meta name="Distribution" content="Global" />"
x<-"<meta name=\"Distribution\" content=\"Global\" />"
nchar(x)
x<-"<script type=\"text/javascript\">"
nchar(x)
x<-"})();"
nchar(x)
x<-"  })();"
nchar(x)
x<-"    			<h1>Affiliations</h1>"
nchar(x)
x<-"    			<ul class="sidemenu">"
x<-"    			<ul class=\"sidemenu\">"
nchar(x)
x
?deparse
x<-`    			<ul class="sidemenu">`
library(httr)
oauth_endpoints("github")
?select
??select
?'select'
swirl
library(swirl)
swirl
swirl()
quit()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
path2csv
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
swirl()
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
help("group_by")
?group_by
by_package<-group_by(cran.package)
by_package<-group_by(cran,.package)
by_package<-group_by(cran,package)
by_package
summarize(by_package)
summarize(by_package, mean(size))
?
n
?n_distinct
summarize()
?submit
?gsub
tbl
pack_sum
?quantile
quantile(pack_sum$count, probs = 0.99)
top_count<-filter(pack_sum, count > 679)
top_counts<-filter(pack_sum, count > 679)
top_counts
n(top_counts)
?n
?length
length(top_counts)
head(top_counts, 20)
nrows(top_counts)
nrow(top_counts)
?desc
?arrange
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
?chain
submit()
?select
source("chain1.R")
submit()
submit()
?mutate
submit()
submit()
submit()
?Devices
dev.cur()
rm(*)
rm()
install.packages("xlsx")
sn.csv <- read.csv("/Users/hfc/R_work/Lynda-R/Ex_Files_UaR_R/Exercise Files/Ch02/02_04/social_network.csv", header = T)
str(sn.csv)
rm(my_char,my_name)
rm(num_vect,tf)
library()
search()
clear
clear90
clear()
cls()
cls
rm(sn.csv)
R.version
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringAsFactors=FALSE)
mydf <- read.csv(file=path2csv, stringAsFactors=FALSE)
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran, r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
select(cran,-5:20)
-5:20
-(5:20)
select(cran,x[-(5:20)])
select(cran, X:-(5:20))
select(cran, -X:(5:20))
select(cran, -X(5:20))
select(cran, X(5:20))
select(cran, X[5:20])
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran,r_version=="3.1.1", country=="US")
?Comparison
filter(cran,r_version<="3.0.2", country=="IN")
filter(cran, country=="US"|country=="IN")
filter(cran,size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb = size/2^20)
mutate(cran3,size_mb = size/2^20, size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(package)
by_package<-group_by(cran,package)
by_package
summarize(cran,mean(size))
summarize(by_package,mean(size))
?n
?n_distinct
submit()
pack_sum
play()
select(cran,distinct(country))
?distinct
distinct(cran$country)
cran$country
?select
cran %>% distinct(country) %>% select(cran, country)
distinct(cran, country)
distinct(select(country),country)
distinct(select(country))
x1<-select(cran, country)
head x1
distinct(x1)
dcx1<-distinct(x1)
arracnge(dcx1)
arrange(dcx1)
arrange(dcx1, country)
nxt()
quantile(pack_sum$count, probs=0.99)
top_counts<-filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts, count)
top_counts_sorted<-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique<-filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
submit()
submit()
submit()
nxt()
submit()
submot()
submit()
submit()
swirl()
swirl
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res<-gather(students2, sex_class,count, -grade)
res
?separate
separate(res,sex_class, c("sex","class"))
submit()
student3
students3
submit()
?spread
submit()
submit()
submit()
submit()
reset()
submit()
submit()
submit()
extract_numeric("class5")
?extract_number
??extract_number
?mutate
submit()
students4
submit()
?unique
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "Passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?select
play()
select(sat,-contains("_total"))
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range)
nxt()
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=libridate)
help(package = libridate)
help(package = lubridate)
this_day <- today()
this_day
year()
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment<-now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-07")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours=5, minutes=39)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- nyc + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(lsat_time, arrive)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
rm(*)
rm(*)
?unlist
source("run_analysis.R")
str(mydata)
mydata[1,1]
x1 <- strsplit(mydata[1,1], " ")
x1 <- strsplit(mydata[1,1], "[:space:]+")
strsplit("just a test", "[:space:]+")
strsplit("just a test", "[:space:]+?")
strsplit("just a test", " ")
strsplit("just a   test", " ")
strsplit("just a   test", "\\s+")
x1 <- strsplit(mydata[1,1], "\\s+")
?read.delim
strsplit("  just a   test", "\\s+")
x1<-mydata[1,1]
str(x1)
gsub("\\s+", " ", x1)
rm(x1)
ls()
rm(ls())
?ls
ls.str()
length(mydata[1,1])
class(mydata)
?read.delim
source("run_analysis.R")
class(mydata)
str(mydata)
mydata[1,1]
?count
nchar(mydata[1,1])
x1<-mydata[1,1]
nchar(x1)
x2<-gsub("\\s+", " ", mydata[1,1])
nchar(x2)
x3<-strsplit(x2, "\\s")
summary(x3)
x2<-gsub("^\\s", "", x2)
x3<-strsplit(x2, "\\s")
summary(x3)
x2<-gsub("\\s+", " ", mydata)
summary(x2)
x2
head(mydata,n=1)
length(head(mydata,n=1))
strsplit("\\s+"," ",head(mydata,n=1))
head(x3,n=1)
?head
head(x3,n=2, addrownums)
tail(head(x3,n=2),n=1)
nrows(x3)
nrow(x3)
nrow(mydata)
summary(mydata)
summary(x1)
summary(x2)
summary(x3)
x2<-gsub("\\s+"," "mydata)
x2<-gsub("\\s+"," ", mydata)
summary(x2)
x2<-gsub("\\s+", " ", mydata, perl=TRUE)
x4<-gsub("  ", " ", mydata)
x4[1]
x4[1,]
rm(x4)
mydata <- read.delim(fn1, header=FALSE, sep="\n", as.is=TRUE)
str(mydata)
summary(mydata)
length(mydata)
rm(x1,x2,x3)
mydata <- read.delim(fn1, header=FALSE, sep="\n", as.is=TRUE)
bpath <- "/users/hfc/Coursera/DataScienceSpec/Getting-and-CleansingData/Project/UCI_HAR_Dataset/"
trnpath <- "train"
fn1 <- "X_train.txt"
fn1 <- paste(bpath, trnpath, fn1, sep = "/")
mydata <- read.delim(fn1, header=FALSE, sep="\n", as.is=TRUE)
x1<-gsub("  ", " ", mydata)
?data.frame
?data.table
?matrix
x2<-as.matrix(x1,ncol=561)
str(x2)
?strsplit
x2<-as.matrix(strsplit(x1," "),ncol=561)
str(x2)
?unlist
x2<-as.matrix(unlist(strsplit(x1," ")),ncol=561)
str(x2)
x2<-unlist(strsplit(x1," "))
head(x2)
x3<-x2[2,]
length(x2)
x3<-x2[2:length(x2)]
str(x3)
?read.string
cpath<-"/Users/hfc/GitHub/ExData_Plotting1"   #change as needed...
setwd(cpath)
source("plot3.R")
dir()
plotfile<-paste(cpath,"/plot3.png",sep="")
png(filename=plotfile, width=480, height=480)
dir()
png(filename=plotfile, width=480, height=480)
dir()
?dev.off
dev.cur()
dev.list()
dev.off()
png(filename=plotfile, width=480, height=480)
dir()
source("plot3.R")
dir()
source("plot2.R")
source("plot1.R")
?mfrow
?par
with(xdf2, plot(DTG, Voltage, type="l",xlab="datetime", ylab="Voltage"))
with(xdf2, plot(DTG, Global_reactive_power, type="l",xlab="datetime"
, ylab="Global_reactive_power"))
?stop
?break
source("plot4.R")
source("plot4.R")
dir()
source("plot4.R")
